window.onload = main;

function main() {
var gl = MM.getGlContext("gl"),
glUtil = null,
userData = {};

window.requestAnimFrame = (function(){
return  window.requestAnimationFrame       ||
window.webkitRequestAnimationFrame ||
window.mozRequestAnimationFrame    || 
window.oRequestAnimationFrame      ||
window.msRequestAnimationFrame     ||
function(/* function */ callback, /* DOMElement */ element){
window.setTimeout(callback, 1000 / 60);
};
})();

if(!gl)
alert("WebGL not Supported :(");

glUtil = new MM.GlUtil(gl);

init(gl, glUtil, userData);

(function animloop(){
draw(gl, glUtil, userData);
requestAnimFrame(animloop);
})();
}

function draw(gl, glUtil, userData) {
if ( !userData.vertexPosObject )
{
var buffer = createAndBindVertexBuffer();
userData.vertexPosObject = buffer;
}

gl.viewport(0, 0, 640, 480);

gl.clear(gl.COLOR_BUFFER_BIT);

gl.useProgram(userData.program);

// Bind the vertex data
gl.bindBuffer(gl.ARRAY_BUFFER, userData.vertexPosObject);
gl.vertexAttribPointer(userData.vertexAttribLoc, 3, gl.FLOAT, false, 0, 0);
gl.enableVertexAttribArray(userData.vertexAttribLoc);

gl.drawArrays(gl.TRIANGLES, 0, 3);
}

function createAndBindVertexBuffer() {
var vVertices = new Float32Array([ 0.0,  0.5, 0.0,
-0.5, -0.5, 0.0,
0.5, -0.5, 0.0 ]);

var buffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, userData.vertexPosObject);
gl.bufferData(gl.ARRAY_BUFFER, vVertices, gl.STATIC_DRAW);
return buffer;
}

function init(gl, glUtil, userData) {
var vertexShader,
fragmentShader,
program,
linked;

vertexShader = glUtil.loadShader("vs");
fragmentShader = glUtil.loadShader("fs");

program = gl.createProgram();

if(!program) {
throw "couldn't create program";
}

gl.attachShader(program, vertexShader);
gl.attachShader(program, fragmentShader);

gl.linkProgram(program);

linked = gl.getProgramParameter(program, gl.LINK_STATUS);

if(!linked) {
throw "Couldn't link program: " + gl.getProgramInfoLog(program);
}

userData.program = program;
userData.vertexAttribLoc = gl.getAttribLocation( program, "vPosition" );

gl.clearColor(0.0, 0.0, 0.0, 1.0);

//DEBUG
window.gl = gl;
window.program = program;

initObjBuffers();

return true;
}

function initObjBuffers()  {
var z = -2;
mainObjVertexPosBuffID = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, mainObjVertexPosBuffID);
var faMainObjVertexPos = [
// Vorderseite
-1.0, -1.0,  1.0+z,
1.0, -1.0,  1.0+z,
1.0,  1.0,  1.0+z,
-1.0,  1.0,  1.0+z,

// Rueckseite
-1.0, -1.0, -1.0+z,
-1.0,  1.0, -1.0+z,
1.0,  1.0, -1.0+z,
1.0, -1.0, -1.0+z,

// Oberseite
-1.0,  1.0, -1.0+z,
-1.0,  1.0,  1.0+z,
1.0,  1.0,  1.0+z,
1.0,  1.0, -1.0+z,

// Unterseite
-1.0, -1.0, -1.0+z,
1.0, -1.0, -1.0+z,
1.0, -1.0,  1.0+z,
-1.0, -1.0,  1.0+z,

// rechte Seite
1.0, -1.0, -1.0+z,
1.0,  1.0, -1.0+z,
1.0,  1.0,  1.0+z,
1.0, -1.0,  1.0+z,

// linke Seite
-1.0, -1.0, -1.0+z,
-1.0, -1.0,  1.0+z,
-1.0,  1.0,  1.0+z,
-1.0,  1.0, -1.0+z,

];
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(faMainObjVertexPos), gl.STATIC_DRAW);
mainObjVertexPosBuffID.itemSize = 3;
mainObjVertexPosBuffID.numItems = 24;

mainObjVertexIndexBuffID = gl.createBuffer();
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mainObjVertexIndexBuffID);
var faMainObjVertexIndices = [
0, 1, 2,      0, 2, 3,    // Vorderseite
4, 5, 6,      4, 6, 7,    // RÃ¼ckseite
8, 9, 10,     8, 10, 11,  // Oberseite
12, 13, 14,   12, 14, 15, // Unterseite
16, 17, 18,   16, 18, 19, // rechte Seite
20, 21, 22,   20, 22, 23  // linke Seite
];
gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(faMainObjVertexIndices), gl.STATIC_DRAW);
mainObjVertexIndexBuffID.itemSize = 1;
mainObjVertexIndexBuffID.numItems = 36;
}