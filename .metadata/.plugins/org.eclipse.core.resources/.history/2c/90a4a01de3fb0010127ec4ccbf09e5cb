<html> 
<head> 
<title> TRIANGLE </title> 
<script type="text/javascript" src="MM.js"> </script> 

<script type="x-shader/x-vertex" id="vs">
  attribute vec4 vPosition; 
  void main() {
    gl_Position = vPosition; 
  } 
</script> 

<script type="x-shader/x-fragment" id="fs">
  precision mediump float; 
  void main() {
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);  
  } 
</script> 

<script type="text/javascript"> 
  window.onload = main; 
  
  function main() {
    var gl = MM.getGlContext("gl"),
        glUtil = null, 
        userData = {};

    window.requestAnimFrame = (function(){
      return  window.requestAnimationFrame       || 
              window.webkitRequestAnimationFrame || 
              window.mozRequestAnimationFrame    || 
              window.oRequestAnimationFrame      || 
              window.msRequestAnimationFrame     || 
              function(/* function */ callback, /* DOMElement */ element){
                window.setTimeout(callback, 1000 / 60);
              };
    })();
  
    if(!gl)
      alert("WebGL not Supported :("); 

    glUtil = new MM.GlUtil(gl); 

    init(gl, glUtil, userData);

    (function animloop(){
      draw(gl, glUtil, userData);
      requestAnimFrame(animloop);
    })();

    //DEBUG 
    window.gl = gl; 
  }

  function draw(gl, glUtil, userData) {
    if ( !userData.vertexPosObject )
    {
      var vVertices = new Float32Array([ 0.0,  0.5, 0.0,
                                         -0.5, -0.5, 0.0,
                                          0.5, -0.5, 0.0 ]);

      userData.vertexPosObject = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, userData.vertexPosObject);
      gl.bufferData(gl.ARRAY_BUFFER, vVertices, gl.STATIC_DRAW); 
    }

    gl.viewport(0, 0, 640, 480); 

    gl.clear(gl.COLOR_BUFFER_BIT); 

    gl.useProgram(userData.program); 

    // Bind the vertex data
    gl.bindBuffer(gl.ARRAY_BUFFER, userData.vertexPosObject);
    gl.vertexAttribPointer(userData.vertexAttribLoc, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(userData.vertexAttribLoc);

    gl.drawArrays(gl.TRIANGLES, 0, 3);  
  }

  function init(gl, glUtil, userData) {
    var vertexShader, 
        fragmentShader, 
        program, 
        linked; 

    vertexShader = glUtil.loadShader("vs"); 
    fragmentShader = glUtil.loadShader("fs"); 

    program = gl.createProgram(); 

    if(!program) { 
      throw "couldn't create program"; 
    }

    gl.attachShader(program, vertexShader); 
    gl.attachShader(program, fragmentShader); 

    gl.linkProgram(program);

    linked = gl.getProgramParameter(program, gl.LINK_STATUS); 
    
    if(!linked) {
      throw "Couldn't link program: " + gl.getProgramInfoLog(program); 
    } 

    userData.program = program; 
    userData.vertexAttribLoc = gl.getAttribLocation( program, "vPosition" ); 
    
    gl.clearColor(0.0, 0.0, 0.0, 1.0); 

    //DEBUG 
    window.program = program; 

    return true; 
  }
</script>
</head> 
<body> 
<canvas id="gl" width="640" height="480"> </canvas> 
</body> 

</html> 

